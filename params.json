{"name":"JITProf","tagline":"Pinpointing JIT-Unfriendly code in JavaScript","body":"JITProf v1.1\r\n=====================\r\n### What is JITProf?\r\n\r\nJITProf is a tool that tells you which part of your JavaScript code may be slow on JIT-engine. We call those slow code **JIT-unfriendly code**.\r\n\r\n#### What is JIT-unfriendly code?\r\n\r\nJIT-unfriendly code is a piece of JavaScript that is hard for the JIT-engine to do profitable optimization.\r\n\r\n**Example:** Suppose you want to create an array containing 10k numbers with number i at index i:\r\n\r\n```javascript\r\nvar array = [];\r\nfor(var i=10000-1;i>=0;i--) {\r\n\tarray[i] = i; // JIT-unfriendly code\r\n}\r\n```\r\n\r\nThe first half of iterations create a non-contiguous array.\r\nIn order to save memory, JIT-engine will use a hash-table-like representation to store the array\r\nin memory instead of a contiguous memory space (like in C/C++). Consequently, accessing ```array``` is quite slow.\r\n\r\nA more efficient and JIT-friendly code should initialize the array elements in asending order:\r\n\r\n```javascript\r\nvar array = [];\r\nfor(var i=0;i<10000;i++) {\r\n\tarray[i] = i;\r\n}\r\n```\r\n\r\nThis time, the JIT-engine will always use contiguous memory space for array and array accessing is much faster.\r\nThis simple change leads to 10X-20X speedup on Firefox and Chrome.\r\n\r\nNote that there are different JIT-unfriendly code patterns, those patterns relate to memory model, polymorphic operations, hidden classes and inline caching. More details are in our [technical report](docs/TR.md).\r\n\r\n#### How does JITProf work?\r\n\r\nJITProf monitors the execution of a JavaScript program and analyses its runtime behavior to pinpoint the JIT-unfriendly code location.\r\n\r\nFor the previous example, JITProf will pinpoint to ```array[i] = i;``` and tells you the code is accessing a non-contiguous array\r\nfrequently. Note that this is only one of those JIT-unfriendly code patterns deteted by JITProf. \r\nFor more details, please [read this document](docs/TR.md).\r\n\r\n#### Overall how much speedup after removing JIT-unfriendly code?\r\n\r\nThe speedup ranges from 1% ~ 20% on SunSpider and Google Octane benchmark.\r\n\r\n\r\nInstall JITProf\r\n---------------\r\n\r\nTo run JITProf with Jalangi2 on real-world websites, you need to install\r\n\t\r\n * **jalangi2** See the [Jalangi2 Repository](https://github.com/Samsung/jalangi2)\r\n (Put Jalangi2 repository and this repository under the same directory.)\r\n\r\n * **mitmproxy** For more details, please read [this document](docs/mitmproxy_install.md).\r\n\r\nUse JITProf to find JIT-unfriendly code\r\n---------------------------------------\r\n\r\nJITProf can be used on both node.js applications and websites.\r\n\r\nAll following instructions assume that the current working directory is the root direcotry of JITProf and that the main [jalangi2](https://github.com/Samsung/jalangi2) directory is a sibling directory of JITProf. This project currently supports Mac OS.\r\n\r\n#### Find JIT-unfriendly code on websites\r\n\r\n```\r\n./script/jitprof-web.sh [sampler's name]\r\n```\r\n\r\nExisting samplers: ```non```, ```random```, ```decay```\r\n\r\n\r\nNow you can explore the web with any browser you like.\r\nIn the browser window, use ```Alt```-```Shift```-```T``` key combination to dump\r\nthe JITProf wanrings in the web console.\r\n\r\n**Note:** After using JITProf, type the following command to disable web proxy configuration. \r\n```\r\n./script/jitprof-web.sh\r\n```\r\n\r\n#### Find JIT-unfriendly code running on node.js\r\n\r\n```\r\n./script/jitprof.sh [js program relative path without .js suffix]\r\n```\r\n\r\nExample:\r\n\r\n```\r\n./script/jitprof.sh tests/jitprof/JITAwareTest\r\n```\r\n\r\n#### Find JIT-unfriendly code (reduce overhead by sampling)\r\n\r\n**Warning:** the following script will stash and apply a patch to the jalangi2 repository in the sibling directory of jitprof. Please make sure all changes in the Jalangi2 directory are properly saved.\r\n\r\nRun JITProf with random sampler (10% sampling rate):\r\n\r\n```\r\n./script/jitprof-sample.sh [sampler name] [js program relative path without .js suffix]\r\n```\r\n\r\nExisting samplers: ```non```, ```random```, ```decay```\r\n\r\nExample:\r\n\r\n```\r\n./script/jitprof-sample.sh random tests/jitprof/JITAwareTest\r\n```\r\n\r\n\r\n### Measure runtime overhead (with sampling)\r\n\r\nUsing hybrid sampling (i.e., sampling instrumentation on function level and sampling the analysis of instructions),\r\nwe can reduce the overhead of JITProf by one (sometime two) order(s) of magnitude.\r\n\r\nFor more details and to replicate the experiment, [please go to this page](exp/hybrid_sampling_exp).\r\n\r\n\r\n### Micro-benchmark and experiments measuring speedup on Benchmarks\r\n\r\nMicro-benchmarks and improved benchmark programs are decoupled from the implementation of JITProf.\r\nThose experimental code and dataset are available in [JITProf v1.0](https://github.com/Berkeley-Correctness-Group/Jalangi-Berkeley/tree/master/src/js/analyses/jitaware).\r\n\r\nLicense\r\n-------\r\n\r\nJITProf is distributed under the [Apache License](http://www.apache.org/licenses/LICENSE-2.0.html).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}